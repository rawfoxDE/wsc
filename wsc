#!/bin/bash

#################################################################################
#                                                                               #
# Wine Source Control by rawfoxDE@gmail.com                                     #
#                                                                               #
# This script should help you, getting the latest wine and wine-staging sources #
# and compile them on your system.                                              #
#                                                                               #
#################################################################################

# eye candy, practice on ANSI escape sequencies xD

 RED="\033[1;41m"
 BLU="\033[44m"
 GRN="\033[1;43m"
fBLU="\033[34m"
fRED="\e[1;7;33m"
 YLW="\033[1;42m"

 RES="\033[0m"
 VER="v0.1-19082019"

# Functions -------------------------------------------------

# _DONE is called, whenever an action is done
# it is only a message
_DONE()
{
    echo -en "$YLW ALL DONE !!!                                           $RES\n"
}

# _BUILD is called when you are ready to compile the sources
# either after upgrading the vanilla wine source or the wine-staging source
_BUILD()
{
    echo -en $YLW "Building Wine                                          $RES\n"

    rm -rf ./build/wine-32/* # removing the old install directories
    rm -rf ./build/wine-64/* # a better solution soon

    mkdir -p --mode=0777 ./build/wine-32
    mkdir -p --mode=0777 ./build/wine-64

    # compile 64bit version first in order to get wow64
    # important is the --enable-win64 flag

    cd ./build/wine-64
    echo -en "$BLU configure 64bit part, please wait                      $RES\n"
    ../../workdir/configure CC="ccache gcc" CFLAGS="-march=native -O3 -pipe -fstack-protector-strong" --enable-win64 > ../configure64.log
    echo -en "$GRN compiling 64bit part now, please wait ...              $RES\n"
    make -j6 > ../compile64.log # overheat protection for amd8150 in summer :)

    # compile the 32bit version now
    # the flag --with-wine64=/path includes the former 64bit build

    cd ../wine-32
    echo -en "$BLU configure 32bit part, please wait                      $RES\n"
    PKG_CONFIG_PATH=/usr/lib/pkgconfig ../../workdir/configure CC="ccache gcc" CFLAGS="-march=native -O3 -pipe -fstack-protector-strong" --with-wine64=../wine-64 > ../configure32.log
    echo -en "$GRN compiling 32bit part now, please wait  ...             $RES\n"
    make -j6 > ../compile32.log
    cd ../../
    _DONE

}

_PBUILD()
{
    clear
    echo -en "$BLU Change the wine Install Path ...                      $RES\n

    $YLW Enter new Installation taget: $RES"

    read I
    if [ $I = "q" ]; then _DONE
    else
    mkdir -p --mode=0777 "$I"
    fi

    echo -en $YLW "\nBuilding Wine                                        $RES\n"

    rm -rf ./build/wine-32/* # removing the old install directories
    rm -rf ./build/wine-64/* # a better solution soon

    mkdir -p --mode=0777 ./build/wine-32
    mkdir -p --mode=0777 ./build/wine-64

    # compile 64bit version first in order to get wow64
    # important is the --enable-win64 flag

    cd ./build/wine-64
    echo -en "$BLU configure 64bit part, please wait                      $RES\n"
    ../../workdir/configure --prefix=$I CC="ccache gcc" CFLAGS="-march=native -O3 -pipe -fstack-protector-strong" --enable-win64 > ../configure64.log
    echo -en "$GRN compiling 64bit part now, please wait ...              $RES\n"
    make -j6 > ../compile64.log # overheat protection for amd8150 in summer :)

    # compile the 32bit version now
    # the flag --with-wine64=/path includes the former 64bit build

    cd ../wine-32
    echo -en "$BLU configure 32bit part, please wait                      $RES\n"
    ../../workdir/configure --prefix=$I CC="ccache gcc" CFLAGS="-march=native -O3 -pipe -fstack-protector-strong" --with-wine64=../wine-64 > ../configure32.log
    echo -en "$GRN compiling 32bit part now, please wait  ...             $RES\n"
    make -j6 > ../compile32.log
    cd ../../

    echo -en "$BLU Installing wine, please wait                           $RES\n"
    cd ./build/wine-32
    make install > ../install32.log
    cd ../wine-64
    make install > ../install64.log
    cd ../../
    _DONE

}

_BUILD32()
{
    clear
    echo -en "$BLU Change the wine Install Path ...                      $RES\n

    $YLW Enter new Installation taget: $RES"

    read I
    if [ $I = "q" ]; then _DONE
    else
    mkdir -p --mode=0777 "$I"
    fi

    echo -en $YLW "Building Wine 32-Bit                                  $RES\n"

    rm -rf ./build/wine-32/* # removing the old install directories
    rm -rf ./build/wine-64/* # a better solution soon

    mkdir -p --mode=0777 ./build/wine-32

    # compile 64bit version first in order to get wow64
    # important is the --enable-win64 flag

    cd ../wine-32
    echo -en "$BLU configure 32bit part, please wait                      $RES\n"
    ../../workdir/configure CC="ccache gcc" CFLAGS="-march=native -O3 -pipe -fstack-protector-strong" > ../configure32.log
    echo -en "$GRN compiling 32bit part now, please wait  ...             $RES\n"
    make -j6 > ../compile32.log
    cd ../../
    _DONE

}

_BUILD64()
{
    clear
    echo -en "$BLU Change the wine Install Path ...                      $RES\n

    $YLW Enter new Installation taget: $RES"

    read I
    if [ $I = "q" ]; then _DONE
    else
    mkdir -p --mode=0777 "$I"
    fi

    echo -en $YLW "Building Wine 64-Bit                                   $RES\n"

    rm -rf ./build/wine-32/* # removing the old install directories
    rm -rf ./build/wine-64/* # a better solution soon

    mkdir -p --mode=0777 ./build/wine-64

    # compile 64bit version first in order to get wow64
    # important is the --enable-win64 flag

    cd ./build/wine-64
    echo -en "$BLU configure 64bit part, please wait                      $RES\n"
    ../../workdir/configure CC="ccache gcc" CFLAGS="-march=native -O3 -pipe -fstack-protector-strong" --enable-win64 > ../configure64.log
    echo -en "$GRN compiling 64bit part now, please wait ...              $RES\n"
    make -j6 > ../compile64.log # overheat protection for amd8150 in summer :)

}


# _INSTALL is called when you select Install from menu
# it will just do a make install on both builds, the 32bit and the 64bit
_INSTALL()
{
    echo -en "$BLU Installing wine, please wait                           $RES\n"
    cd ./build/wine-32
    sudo make install > ../install32.log
    cd ../wine-64
    sudo make install > ../install64.log
    cd ../../

}

# install prerequisits
_PRE-INSTALL()
{
    echo -en "$BLU Installing / Checking Prerequisits ...                 $RES\n"

    sudo dnf install alsa-plugins-pulseaudio.i686 glibc-devel.i686 glibc-devel libgcc.i686 libX11-devel.i686 freetype-devel.i686 libXcursor-devel.i686 libXi-devel.i686 libNX_Xext-devel.i686 libXext-devel.i686 libXxf86vm-devel.i686 libXrandr-devel.i686 libXinerama-devel.i686 mesa-libGLU-devel.i686 mesa-libOSMesa-devel.i686 libXrender-devel.i686 libpcap-devel.i686 ncurses-devel.i686 libzip-devel.i686 lcms2-devel.i686 zlib-devel.i686 libv4l-devel.i686 libgphoto2-devel.i686 libcapifax-devel.i686  cups-devel.i686 libxml2-devel.i686 openldap-devel.i686 libxslt-devel.i686 gnutls-devel.i686 libpng-devel.i686 flac-libs.i686 json-c.i686 libICE.i686 libSM.i686 libXtst.i686 libasyncns.i686 libedit.i686 liberation-narrow-fonts.noarch libieee1284.i686 libogg.i686 libsndfile.i686 libuuid.i686 libva.i686 libvorbis.i686 libwayland-client.i686 libwayland-server.i686 llvm-libs.i686 mesa-dri-drivers.i686 mesa-filesystem.i686 mesa-libEGL.i686 mesa-libgbm.i686 nss-mdns.i686 ocl-icd.i686 pulseaudio-libs.i686 python-talloc.x86_64 sane-backends-libs.i686 tcp_wrappers-libs.i686 unixODBC.i686 samba-common-tools.x86_64 samba-libs.x86_64 samba-winbind.x86_64 samba-winbind-clients.x86_64 samba-winbind-modules.x86_64 mesa-libGL-devel.i686 fontconfig-devel.i686 libXcomposite-devel.i686 libtiff-devel.i686 openal-soft-devel.i686 mesa-libOpenCL-devel.i686 opencl-utils-devel.i686 alsa-lib-devel.i686 gsm-devel.i686 libjpeg-turbo-devel.i686 pulseaudio-libs-devel.i686 pulseaudio-libs-devel gtk3-devel.i686 libattr-devel.i686 libva-devel.i686 libexif-devel.i686 libexif.i686 glib2-devel.i686 mpg123-devel.i686 mpg123-devel.x86_64 libcom_err-devel.i686 libcom_err-devel.x86_64 gstreamer-plugins-base-devel gstreamer-devel.i686 gstreamer.i686 gstreamer-plugins-base.i686 gstreamer-devel gstreamer1.i686 gstreamer1-devel gstreamer1-plugins-base-devel.i686 gstreamer-plugins-base.x86_64 gstreamer.x86_64 gstreamer1-devel.i686 gstreamer1-plugins-base-devel gstreamer-plugins-base-devel.i686 gstreamer-ffmpeg.i686 gstreamer1-plugins-bad-free-devel.i686 gstreamer1-plugins-bad-free-extras.i686 gstreamer1-plugins-good-extras.i686 gstreamer1-libav.i686 gstreamer1-plugins-bad-freeworld.i686

}

# get a new wine release source
_RELEASE()
{
    clear
    echo -en "$BLU Download Source Release ...                           $RES\n"
    echo -en "$GRN Enter Version to download                             $RES\n
    Example: 3.17

    $YLW ==> $RES "

    read Y
    if [ $Y = "q" ]; then _DONE
    else

    rm -rf ./wine-vanilla
    rm -rf ./wine-staging

    mkdir -p --mode=0777 ./cache
    mkdir -p --mode=0777 ./wine-vanilla
    mkdir -p --mode=0777 ./wine-staging
    cd ./cache

    wget -q https://github.com/wine-staging/wine-staging/archive/v$Y.tar.gz
    tar -xzf ./v$Y.tar.gz
    cd wine-staging-$Y
    cp -r ./* ../../wine-staging
    cd ..

    wget -q https://github.com/wine-mirror/wine/archive/wine-$Y.tar.gz
    tar -xzf ./wine-$Y.tar.gz
    cd wine-wine-$Y
    cp -r ./* ../../wine-vanilla
    cd ../../
    fi

}

_REBASE()
{
    clear
    echo -en "$BLU Rebase the source ...                                 $RES\n"
    echo -en "$GRN Enter SHA1 to reset the source to                     $RES\n

    $YLW ==> $RES "

    read Z
    if [ $Z = "q" ]; then _DONE
    else
    cd workdir
    git reset --hard $Z
    cd ..
    fi

}

# Script Main Input loop
#####################################################################################
clear
WineVer=$(wine --version)
CUR_PATH=$(pwd)

while [ "$X" != "q" ]
do

# menu selection
echo -en     $BLU "WINE SOURCE CONTROL $VER by rawfox            $RES\n"
echo -en "      $GRN   $WineVer   $RES
$RED 1 $RES - Help                 $RED 3 $RES - Check Wine Vanilla
$RED 2 $RES - Check Wine Staging   $RED 4 $RES - Check installed Wine version

$RED 5 $RES - INJECT STAGING       $RED 6 $RES - BUILD BIARCH
$BLU p $RES - Apply my Patches     $RED 7 $RES - BUILD 64-Bit
$GRN i $RES - INSTALL              $RED 8 $RES - BUILD 32-Bit
$RED P $RES - CHANGE INSTALL PREFIX

$RED a $RES - Get current wine-staging SHA1
$RED b $RES - Rebase wine source to the wine-staging Hash
$RED c $RES - Stash changes and reset source to vanilla wine

$BLU k $RES - Copy Vanilla to workdir

$RED Q $RES - Install Prerequisits
$RED 9 $RES - Get a new Wine Staging source
$GRN 0 $RES - Get a new Vanilla Wine source           $RED q $RES - Quit
$RED r $RES - Get a specific Wine release version
$RED R $RES - Rebase workdir source to SHA1
      $GRN $CUR_PATH $RES
$BLU ------------------------------------------------------ $RES
$YLW ==> $RES  "

read X
case $X in

[1]* )
    clear
#    less ./README.md
#    cd ..
    echo -en $BLU "Help coming soon ...                                   $RES\n"

;;

[2]* )
    clear
    echo -en $BLU "checking Wine Staging update ..                        $RES\n"
    cd ./wine-staging 
    echo -en $fRED " "
    git pull
    echo -en $RES
    cd ..

;;

[3]* )
    clear
    echo -en $BLU "checking Vanilla Wine updates ..                       $RES\n"
    cd ./wine-vanilla
    echo -en $fRED " "
    git pull
    echo -en $RES
    cd ..

;;

[4]* )
    clear
    echo -en $BLU "check installed wine version ...                       $RES\n"
    echo -en $GRN " "
    wine --version
    echo -en $RES

;;

[5]* )
    clear
    echo -en $RED "prepareing source and injecting --all patches !!!      $RES\n"
    cd ./workdir/
    ln -s "../wine-staging/patches"
    ./patches/patchinstall.sh --all
    cd ..

;;

[6]* )

    _BUILD

;;

[7]* )

    _BUILD64

;;

[8]* )

    _BUILD32

;;


[Q]* )

    _PRE-INSTALL

;;

[i]* )
    _INSTALL

;;

[9]* )
    clear
    echo -en $fRED "Deleting the old staging source tree              $RES\n"
    rm -rf ./wine-staging
    echo -en $fRED "Getting a new copy of the wine-staging source     $RES\n"
    git clone https://github.com/wine-staging/wine-staging.git ./wine-staging

;;

[0]* )
    clear
    echo -en $fRED "Deleting the old wine source tree                 $RES\n"
    rm -rf ./wine-vanilla
    echo -en $fRED "Getting a new copy of the wine source             $RES\n"
    git clone git://source.winehq.org/git/wine.git ./wine-vanilla

;;

[a]* )
    clear
    echo -en $YLW "Getting SHA1 Hash                                      $RES\n\n"
    myHash=$(./wine-staging/patches/patchinstall.sh --upstream-commit)
    echo -en $fRED 
    echo $myHash
    echo -en $RES "\n"

;;

[b]* )
    clear
    echo -en $fRED "Reset wine source to wine staging SHA1                 $RES \n\n"
    cd ./workdir
    git reset --hard $myHash
    echo -en  $YLW "You can insert the wine-staging patches now            $RES \n\n"
    cd ..

;;

[c]* )
    clear
    echo -en $fRED "Stash the changes and reset wine source to latest  $RES \n" 
    cd ./workdir
    git stash
    git pull
    cd ..

;;

[p]* )
    clear
    echo -en $fRED "Patching Sources ...                                   $RES \n" 
    cd ./workdir
    patch -p1 < ../patches/*1*.patch
    patch -p1 < ../patches/*2*.patch
    patch -p1 < ../patches/*3*.patch
    patch -p1 < ../patches/*4*.patch

    cd ..

;;

[r]* )
    _RELEASE

;;

[k]* )
    clear
    echo -en $fRED "Restore Workdir from Wine Vanilla ...                  $RES \n"
    rm -rf ./workdir
    cp -rf ./wine-vanilla ./workdir

;;

[P]* )

    _PBUILD

;;

[R]* )
    _REBASE

;;

esac

_DONE

# End of while loop
done


