#!/bin/bash

#################################################################################
#                                                                               #
# Wine Source Control by rawfox@freenet.de                                      #
#                                                                               #
# This script should help you, getting the latest wine and wine-staging sources #
# and compile them on your system.                                              #
#                                                                               #
#################################################################################

# eye candy, practice on ANSI escape sequencies xD

 RED="\033[1;41m"
 BLU="\033[44m"
 GRN="\033[1;43m"
fBLU="\033[34m"
fRED="\e[1;7;33m"
 RES="\033[0m"
 YLW="\033[1;42m"
 VER="v0.1-02032018"

# Functions -------------------------------------------------

# _DONE is called, whenever an action is done
# it is only a message
_DONE()
{
    echo -en "$YLW ALL DONE !!!                                       $RES\n"
}

# _BUILD is called when you are ready to compile the sources
# either after upgrading the vanilla wine source or the wine-staging source
_BUILD()
{
    echo -en $YLW "Building Wine                                      $RES\n"
    mkdir -p ./build/wine-32
    mkdir -p ./build/wine-64
    
    rm -rf ./build/wine-32/* # removing the old install directories
    rm -rf ./build/wine-64/* # a better solution soon as we dont need to compile the whole thing

    # compile 64bit version first in order to get wow64
    # importand is the --enable-win64 flag
    cd ./build/wine-64
    ../../wine-test/configure CFLAGS="-march=native -O3 -pipe -fstack-protector-strong"  --enable-win64
    make -j4 # overheat protection for amd8150 in summer :)
    # the flag --with-wine64=/path includes the former 64bit build
    cd ../wine-32
    PKG_CONFIG_PATH=/usr/lib/pkgconfig ../../wine-test/configure CFLAGS="-march=native -O3 -pipe -fstack-protector-strong" --with-wine64=../wine-64 --without-gssapi --without-krb5
    make -j4
    cd ../../
    _DONE

}

_VBUILD()
{
    echo -en $YLW "Building Vanilla Wine                               $RES\n"
    mkdir -p ./build/wine-32
    mkdir -p ./build/wine-64
    
    rm -rf ./build/wine-32/* # removing the old install directories
    rm -rf ./build/wine-64/* # a better solution soon as we dont need to compile the whole thing

    # compile 64bit version first in order to get wow64
    # importand is the --enable-win64 flag
    cd ./build/wine-64
    ../../wine-vanilla/configure CFLAGS="-march=native -O3 -pipe -fstack-protector-strong"  --enable-win64
    make -j4 # overheat protection for amd8150 in summer :)

    # the flag --with-wine64=/path includes the former 64bit build
    cd ../wine-32
    PKG_CONFIG_PATH=/usr/lib/pkgconfig ../../wine-vanilla/configure CFLAGS="-march=native -O3 -pipe -fstack-protector-strong" --with-wine64=../wine-64 --without-gssapi --without-krb5
    make -j4
    cd ../../
    _DONE
}


# _INSTALL is called when you select Install from menu
# it will just do a make install on both builds, the 32bit and the 64bit
_INSTALL()
{
    cd ./build/wine-32
    sudo make install
    cd ../wine-64
    sudo make install
    cd ../../

}

# Script Main Input loop

clear
WineVer=$(wine --version)

while [ "$X" != "q" ]
do

# menu selection
echo -en     $BLU "WINE SOURCE CONTROL $VER by rawfox            $RES\n"
echo -en "$GRN $WineVer $RES 

$RED 1 $RES - Check WORKDIR        $GRN 3 $RES - Check Wine Vanilla
$RED 2 $RES - Check Wine Staging   $RED 4 $RES - Check installed Wine version

$RED 5 $RES - INJECT STAGING       $BLU p $RES - Apply my Patches
$RED 6 $RES - COMPILE WORKDIR      $RED i $RES - INSTALL
$GRN v $RES - COMPILE VANILLA         

$RED a $RES - Get current wine-staging SHA1 
$RED b $RES - Rebase wine source to the wine-staging Hash
$RED c $RES - Stash changes and reset source to vanilla wine

$BLU k $RES - Restore Vanilla to workdir      
$BLU r $RES - Restore Backup  to Workdir      
                                
$RED 9 $RES - Get a new Wine Staging source
$GRN 0 $RES - Get a new Vanilla Wine source   $RED q $RES - Quit

$BLU ------------------------------------------------------ $RES
$YLW ==> $RES  "

read X
case $X in

[1]* )
    clear
    echo -en $BLU "checking Workdir ..                                $RES\n"
    cd ./wine-test
    echo -en $fRED " "
    git pull
    echo -en $RES
    cd ..
    
;;

[2]* )
    clear
    echo -en $BLU "checking Wine Staging update ..                    $RES\n"
    cd ./wine-staging
    echo -en $fRED " "
    git pull
    echo -en $RES
    cd ..

;;

[3]* )
    clear
    echo -en $BLU "checking Vanilla Wine updates ..                   $RES\n"
    cd ./wine-vanilla
    echo -en $fRED " "
    git pull
    echo -en $RES
    cd ..

;;


[4]* )
    clear
    echo -en $BLU "check installed wine version ...                   $RES\n"
    echo -en $fRED " "
    wine --version
    echo -en $RES
    
;;

[5]* )
    clear
    echo -en $RED "prepareing source and injecting --all patches !!!  $RES\n"
    cd ./wine-test/
    ln -s "../wine-staging/patches"
    ./patches/patchinstall.sh --all
    cd ..

;;

[6]* )

    _BUILD

;;

[v]* )

    _VBUILD

;;

[i]* )
    _INSTALL

;;

[9]* )
    clear
    echo -en $fRED "Deleting the old staging source tree              $RES\n"
    rm -rf ./wine-staging
    echo -en $fRED "Getting a new copy of the wine-staging source     $RES\n"
    git clone https://github.com/wine-staging/wine-staging.git ./wine-staging

;;

[0]* )
    clear
    echo -en $fRED "Deleting the old wine source tree                 $RES\n"
    rm -rf ./wine-vanilla
    echo -en $fRED "Getting a new copy of the wine source             $RES\n"
    git clone git://source.winehq.org/git/wine.git ./wine-vanilla

;;

[a]* )
    clear
    echo -en $YLW "Getting SHA1 Hash                                  $RES\n\n"
    myHash=$(./wine-staging/patches/patchinstall.sh --upstream-commit)
    echo -en $fRED 
    echo $myHash
    echo -en $RES "\n"
    
;;

[b]* )
    clear
    echo -en $fRED "Reset wine source to wine staging SHA1             $RES \n\n"
    cd ./wine-test
    git reset --hard $myHash
    echo -en  $YLW "You can insert the wine-staging patches now        $RES \n\n"
    cd ..
    
;;

[c]* )
    clear
    echo -en $fRED "Stash the changes and reset wine source to latest  $RES \n" 
    cd ./wine-test
    git stash
    git pull
    cd ..

;;


[p]* )
    clear
    echo -en $fRED "Patching Sources ...                                $RES \n" 
    cd ./wine-test
    patch -p1 < ../patches/gta5-patch/gta1.patch
    patch -p1 < ../patches/gta5-patch/gta2.patch
    patch -p1 < ../patches/typo-patch/typo.patch
    cd ..

;;

[k]* )
    clear
    echo -en $fRED "Restore Workdir from Wine Vanilla ...               $RES \n" 
    rm -rf ./wine-test
    cp -rf ./wine-vanilla ./wine-test
    
;;

[r]* )
    clear
    echo -en $fRED "Restore Workdir from Wine Backup  ...               $RES \n" 
    rm -rf ./wine-test
    cp -rf ./bak ./wine-test
    
;;

esac

_DONE

# End of while loop
done


